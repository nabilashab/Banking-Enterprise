
DROP TABLE TRANSACTION_HISTORY;
DROP TABLE BORROWER;
DROP TABLE LOAN;
DROP TABLE DEPOSITOR;
DROP TABLE CUSTOMER;
DROP TABLE ACCOUNT;
DROP TABLE BRANCH;

CREATE TABLE BRANCH(
	BRANCH_NAME VARCHAR(20) NOT NULL,
	BRANCH_CITY VARCHAR(20),
	ASSESTS NUMBER(20),
	BRANCH_ZIP VARCHAR(20),
	PRIMARY KEY(BRANCH_NAME)
);

--ALTER TABLE PRIMARY KEY FOREIGN KEY
ALTER TABLE BRANCH ADD PRIMARY KEY(BRANCH_NAME);

CREATE TABLE ACCOUNT(
	ACCOUNT_NUMBER VARCHAR(20) NOT NULL,
	BRANCH_NAME VARCHAR(20),
	BALANCE NUMBER(7),
	PRIMARY KEY (ACCOUNT_NUMBER)
);

--ALTER TABLE FOREIGN KEY
ALTER TABLE ACCOUNT ADD FOREIGN KEY (BRANCH_NAME) REFERENCES BRANCH(BRANCH_NAME);


CREATE TABLE CUSTOMER(
	CUSTOMER_NAME VARCHAR(20) NOT NULL,
	CUSTOMER_STREET VARCHAR(20),
	CUSTOMER_CITY VARCHAR(20),
	CUSTOMER_PASS VARCHAR(20),
	CUSTOMER_EMAIL VARCHAR(20),
	PRIMARY KEY (CUSTOMER_NAME)
);

CREATE TABLE DEPOSITOR(
	CUSTOMER_NAME VARCHAR(20),
	ACCOUNT_NUMBER VARCHAR(20),
	FOREIGN KEY (CUSTOMER_NAME) REFERENCES CUSTOMER(CUSTOMER_NAME),
	FOREIGN KEY (ACCOUNT_NUMBER) REFERENCES ACCOUNT(ACCOUNT_NUMBER)
);

CREATE TABLE LOAN(
	LOAN_NUMBER VARCHAR(20) NOT NULL,
	BRANCH_NAME VARCHAR(20),
	AMOUNT NUMBER(7),
	PRIMARY KEY (LOAN_NUMBER),
	FOREIGN KEY (BRANCH_NAME) REFERENCES BRANCH(BRANCH_NAME)
);

CREATE TABLE BORROWER(
	CUSTOMER_NAME VARCHAR(20),
	LOAN_NUMBER VARCHAR(20),
	FOREIGN KEY (CUSTOMER_NAME) REFERENCES CUSTOMER(CUSTOMER_NAME),
	FOREIGN KEY (LOAN_NUMBER) REFERENCES LOAN(LOAN_NUMBER)
);

CREATE TABLE TRANSACTION_HISTORY(
	TRANSACTION_TYPE VARCHAR(20),
	BRANCH_NAME VARCHAR(20),
	CUSTOMER_NAME VARCHAR(20),
	ACCOUNT_NUMBER VARCHAR(20),
	TRANSITION_AMOUNT NUMBER(7),
	FOREIGN KEY (BRANCH_NAME) REFERENCES BRANCH(BRANCH_NAME),
	FOREIGN KEY (CUSTOMER_NAME) REFERENCES CUSTOMER(CUSTOMER_NAME),
	FOREIGN KEY (ACCOUNT_NUMBER) REFERENCES ACCOUNT(ACCOUNT_NUMBER)
);

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('BRANCH');
end;
/
DESCRIBE BRANCH;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('ACCOUNT');
end;
/
DESCRIBE ACCOUNT;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('DEPOSITOR');
end;
/
DESCRIBE DEPOSITOR;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('BORROWER');
end;
/
DESCRIBE BORROWER;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('CUSTOMER');
end;
/
DESCRIBE CUSTOMER;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('LOAN');
end;
/
DESCRIBE LOAN;

SET SERVEROUTPUT ON
begin
	dbms_output.put_line('TRANSACTION_HISTORY');
end;
/
DESCRIBE TRANSACTION_HISTORY;

INSERT INTO BRANCH VALUES ('BRIGHTON','BROOKLYN','7100000','AA11');
INSERT INTO BRANCH VALUES ('DOWNTOWN','BROOKLYN','9000000','CC33');
INSERT INTO BRANCH VALUES ('MIANUS','HORSENECK','400000','DD44');
INSERT INTO BRANCH VALUES ('NORTH TOWN','RYE','3700000','BB22');
INSERT INTO BRANCH VALUES ('PERRYRIDGE','HORSENECK','1700000','HH88');
INSERT INTO BRANCH VALUES ('POWNAL','BENNINGTON','300000','FF66');
INSERT INTO BRANCH VALUES ('REDWOOD','PALO ALTO','2100000','G77');
INSERT INTO BRANCH VALUES ('ROUND HILL','HORSENECK','8000000','EE55');
SELECT * FROM BRANCH;

CREATE OR REPLACE TRIGGER CHECK_AMOUNT BEFORE INSERT OR UPDATE ON ACCOUNT
FOR EACH ROW
DECLARE
   a_min constant NUMBER(7) := 100;
   a_max constant NUMBER(7) := 5000;
BEGIN
  IF :new.BALANCE > a_max OR :new.BALANCE < a_min THEN
  RAISE_APPLICATION_ERROR(-20000,'Amount is too small or large');
END IF;
END;
/

INSERT INTO ACCOUNT VALUES ('A-101','DOWNTOWN', 500);
INSERT INTO ACCOUNT VALUES ('A-102','PERRYRIDGE', 400);
INSERT INTO ACCOUNT VALUES ('A-201','BRIGHTON', 900);
INSERT INTO ACCOUNT VALUES ('A-215','MIANUS', 700);
INSERT INTO ACCOUNT VALUES ('A-217','BRIGHTON', 750);
INSERT INTO ACCOUNT VALUES ('A-222','REDWOOD', 300);



INSERT INTO CUSTOMER VALUES ('ADAMS','SPRING','PITTSFIELD','111AAA','ADAMS@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('BROOKS','SENATOR','BROOKLYN','222BBB','BROOKS@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('CURRY','NORTH','RYE','333CCC','CURRY@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('GLENN','SAND HILL','WOODSIDE','444DDD','GLENN@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('GREEN','WALNUT','STAMFORD','555EEE','GREEN@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('HAYES','MAIN','HARRISON','666FFF','HAYES@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('JOHNSON','ALMA','PALO ALTO','777GGG','JOHNSON@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('JONES','MAIN','HARRISON','888HHH','JONES@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('LINDSAY','PARK','PITTSFIELD','999III','LINDSAY@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('SMITH','NORTH','RYE','101JJJ','SMITH@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('TURNER','PUTNAM','STAMFORD','111KKK','TURNER@EMAIL.COM');
INSERT INTO CUSTOMER VALUES ('WILLIAMS','NASSAU','PRINCETON','121LLL','WILLIAMS@EMAIL.COM');
SELECT * FROM CUSTOMER;

INSERT INTO DEPOSITOR VALUES ('HAYES','A-102');
INSERT INTO DEPOSITOR VALUES ('JOHNSON','A-101');
INSERT INTO DEPOSITOR VALUES ('JOHNSON','A-201');
INSERT INTO DEPOSITOR VALUES ('JONES','A-217');
INSERT INTO DEPOSITOR VALUES ('LINDSAY','A-222');
INSERT INTO DEPOSITOR VALUES ('SMITH','A-215');
INSERT INTO DEPOSITOR VALUES ('TURNER','A-305');
SELECT * FROM DEPOSITOR;

INSERT INTO LOAN VALUES ('L-11','ROUND HILL', 900);
INSERT INTO LOAN VALUES ('L-14','DOWNTOWN', 1500);
INSERT INTO LOAN VALUES ('L-15','PERRYRIDGE', 1500);
INSERT INTO LOAN VALUES ('L-16','PERRYRIDGE', 1300);
INSERT INTO LOAN VALUES ('L-17','DOWNTOWN', 1000);
INSERT INTO LOAN VALUES ('L-23','REDWOOD', 2000);
INSERT INTO LOAN VALUES ('L-93','MIANUS', 500);
SELECT * FROM LOAN;

INSERT INTO BORROWER VALUES ('ADAMS','L-16');
INSERT INTO BORROWER VALUES ('CURRY','L-93');
INSERT INTO BORROWER VALUES ('HAYES','L-15');
INSERT INTO BORROWER VALUES ('JONES','L-17');
INSERT INTO BORROWER VALUES ('SMITH','L-11');
INSERT INTO BORROWER VALUES ('SMITH','L-23');
INSERT INTO BORROWER VALUES ('WILLIAMS','L-17');
SELECT * FROM BORROWER;

CREATE OR REPLACE TRIGGER CHECK_TRANSITION BEFORE INSERT OR UPDATE ON TRANSACTION_HISTORY
FOR EACH ROW
DECLARE
   t_min constant NUMBER(7) := 100;
   t_max constant NUMBER(7) := 5000;
BEGIN
  IF :new.TRANSITION_AMOUNT > t_max OR :new.TRANSITION_AMOUNT < t_min THEN
  RAISE_APPLICATION_ERROR(-20000,'Transaction is too small or large');
END IF;
END;
/

INSERT INTO TRANSACTION_HISTORY VALUES ('WITHDRAWAL','ROUND HILL','TURNER','A-305', 700);
INSERT INTO TRANSACTION_HISTORY VALUES ('DEPOSIT','MIANUS','SMITH','A-215', 500);
INSERT INTO TRANSACTION_HISTORY VALUES ('WITHDRAWAL','REDWOOD','LINDSAY','A-222', 900);
INSERT INTO TRANSACTION_HISTORY VALUES ('DEPOSIT','PERRYRIDGE','HAYES','A-102', 750);
INSERT INTO TRANSACTION_HISTORY VALUES ('WITHDRAWAL','DOWNTOWN','JOHNSON','A-101', 350);
INSERT INTO TRANSACTION_HISTORY VALUES ('DEPOSIT','BRIGHTON','JONES','A-217', 650);
SAVEPOINT SAVE1;
INSERT INTO TRANSACTION_HISTORY VALUES ('DEPOSIT','BRIGHTON','JONES','A-217', 650);
SELECT * FROM TRANSACTION_HISTORY;
ROLLBACK TO SAVE1;
SELECT * FROM TRANSACTION_HISTORY;

COMMIT;
DELETE FROM TRANSACTION_HISTORY;
SELECT * FROM TRANSACTION_HISTORY;
ROLLBACK;
SELECT * FROM TRANSACTION_HISTORY;

--FUNCTION OF SUM OF ASSESTS
CREATE OR REPLACE FUNCTION TOTAL_ASSESTS RETURN NUMBER IS
   AVG_ASTS BRANCH.ASSESTS%TYPE;
BEGIN
  SELECT SUM(ASSESTS) INTO AVG_ASTS
  FROM BRANCH;
   RETURN AVG_ASTS;
END;
/

SET SERVEROUTPUT ON
BEGIN
dbms_output.put_line('Total ASSESTS: ' || TOTAL_ASSESTS);
END;
/

--PROCEDURE OF INSERTNG INTO ACCOUNT TABLE
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_ACCOUNT(
  A_ACCOUNT ACCOUNT.ACCOUNT_NUMBER%TYPE,
  A_BRANCH ACCOUNT.BRANCH_NAME%TYPE,
  A_BALANCE ACCOUNT.BALANCE%TYPE) IS
BEGIN
  INSERT INTO ACCOUNT
  VALUES ('A-305', 'ROUND HILL', 350);
END ADD_ACCOUNT;
/
SELECT * FROM ACCOUNT;

--SELECT CLAUSE ARITHMATIC OPERATION
SELECT LOAN_NUMBER, BRANCH_NAME, AMOUNT*100 FROM LOAN ORDER BY BRANCH_NAME;

--WHERE CLAUSE
SELECT LOAN_NUMBER
FROM LOAN
WHERE BRANCH_NAME='PERRYRIDGE' AND AMOUNT>1200;

--FROM CLAUSE "FIND THE CUSTOMER NAMES, LOAN NUMBERS, AND LOAN AMMOUNT FOR ALL LOANS AT THE PERRYRIDE BRANCH"
SELECT CUSTOMER_NAME, BORROWER.LOAN_NUMBER, AMOUNT
FROM BORROWER, LOAN
WHERE BORROWER.LOAN_NUMBER=LOAN.LOAN_NUMBER AND BRANCH_NAME='PERRYRIDGE';

--RENAME OPERATION "FIND NAMES, LOAN NUMBERS, LOAN AMOUNT FOR ALL CUSTOMERS WHO HAVE A LOAN FROM THE BANK"
SELECT CUSTOMER_NAME,T.LOAN_NUMBER,S.AMMOUNT
FROM BORROWER AS T,LOAN AS S
WHERE T.LOAN_NUMBER=S.LOAN_NUMBER;

--UNION OPERATION "FIND ALL CUSTOMER HAVING A LOAN, ACCOUNT OR BOTH"
(SELECT CUSTOMER_NAME FROM DEPOSITOR) UNION (SELECT CUSTOMER_NAME FROM BORROWER);

--INTERSECTION "FIND BOTH CUSTOMERS WHO HAVE BOTH A LOAN AND ACCOUNT AT THE BANK"
(SELECT DISTINCT CUSTOMER_NAME FROM DEPOSITOR) INTERSECT (SELECT DISTINCT CUSTOMER_NAME FROM BORROWER) ORDER BY CUSTOMER_NAME;

--UPDATE
UPDATE ACCOUNT SET BALANCE=BALANCE*2;
UPDATE ACCOUNT SET BALANCE=BALANCE/2;

--AVARAGE ACCOUNT BALANCE IS MORE THAN 1200
SELECT BRANCH_NAME, AVG(BALANCE)
FROM ACCOUNT
GROUP BY BRANCH_NAME
HAVING AVG(BALANCE) >200;

--ALTER TABLE
ALTER TABLE BRANCH ADD BRANCH_ADDRESS VARCHAR(20);
ALTER TABLE BRANCH MODIFY BRANCH_ADDRESS NUMBER(10);
ALTER TABLE BRANCH RENAME COLUMN BRANCH_ADDRESS TO BRANCH_LOCATION;
ALTER TABLE BRANCH DROP COLUMN BRANCH_LOCATION;

--JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C JOIN BORROWER B
USING (CUSTOMER_NAME);

--NATURAL JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C NATURAL JOIN BORROWER B;

--CROSS JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C CROSS JOIN BORROWER B;

--INNER JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C INNER JOIN BORROWER B
ON C.CUSTOMER_NAME=B.CUSTOMER_NAME;

--LEFT OUTER JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C LEFT OUTER JOIN BORROWER B
ON C.CUSTOMER_NAME=B.CUSTOMER_NAME;

--RIGHT OUTER JOIN
SELECT C.CUSTOMER_STREET,B.LOAN_NUMBER
FROM CUSTOMER C RIGHT OUTER JOIN BORROWER B
ON C.CUSTOMER_NAME=B.CUSTOMER_NAME;

--PL/SQL FOR MAX ASSEST
SET SERVEROUTPUT ON
DECLARE
   MAX_ASSEST  BRANCH.ASSESTS%type;
BEGIN
   SELECT MAX(ASSESTS)  INTO MAX_ASSEST  
   FROM BRANCH;
   DBMS_OUTPUT.PUT_LINE('The maximum ASSET is : ' || MAX_ASSEST);
 END;
/
